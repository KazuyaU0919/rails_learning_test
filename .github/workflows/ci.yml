name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  # --- Static analysis (Rails/Ruby) ---
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  # --- JS dependency audit (Importmap) ---
  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  # --- RuboCop only (テストは走らせない) ---
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Lint code for consistent style
        run: bin/rubocop -f github

  # --- RSpec (Minitest は使わない) ---
  rspec:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -h localhost"
          --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      RAILS_ENV: test
      DB_HOST: 127.0.0.1
      DB_USER: postgres
      DB_PASSWORD: postgres
      JUDGE0_BASE_URL: https://judge0-ce.p.rapidapi.com
      JUDGE0_RAPIDAPI_KEY: ${{ secrets.JUDGE0_RAPIDAPI_KEY }}
      JUDGE0_HOST_HEADER: judge0-ce.p.rapidapi.com

    steps:
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential git pkg-config libpq-dev libyaml-dev \
            libvips libvips-dev
          ldconfig -p | grep libvips || true

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps (linux/x64 only; drop wrong lock)
        env:
          NPM_CONFIG_AUDIT: 'false'
          NPM_CONFIG_FUND:  'false'
          npm_config_platform: linux
          npm_config_arch: x64
        run: |
          set -e

          # 1) lock が arm64 を含む＝他環境由来なら破棄して作り直す
          if [ -f package-lock.json ] && grep -q 'arm64' package-lock.json; then
            echo "::warning::package-lock.json contains arm64 entries; removing for linux/x64 install"
            rm -f package-lock.json
          fi

          # 2) lock が残っていれば npm ci を試す（optional は省く）
          if [ -f package-lock.json ]; then
            echo "Using existing lock with npm ci (omit optional)…"
            npm ci --omit=optional
          else
            # 3) lock が無ければ、現在の linux/x64 で解決してインストール
            echo "No lock: installing for linux/x64 (omit optional)…"
            npm i --no-package-lock --omit=optional
          fi

      - name: Build CSS (Tailwind v4 via PostCSS)
        run: npm run build:css

      - name: Prepare DB
        run: bin/rails db:prepare

      - name: Run RSpec
        run: bundle exec rspec
